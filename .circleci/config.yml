version: 2.1

orbs:
  codecov: 'codecov/codecov@3.0.0'

.env_app: &env_app
  SHELL: '/bin/bash'

.env_xdebug: &env_xdebug
  XDEBUG_MODE: 'coverage'

.env_composer: &env_composer
  COMPOSER_ALLOW_SUPERUSER: '1'
  COMPOSER_NO_INTERACTION: '1'
  COMPOSER_MEMORY_LIMIT: '-1'
  COMPOSER_DISABLE_XDEBUG_WARN: '1'
  COMPOSER_CACHE_DIR: '/home/circleci/.cache/composer'
  COMPOSER_IGNORE_PLATFORM_REQ: 'php'

.env_node: &env_node
  NVM_DIR: '/home/circleci/.nvm'
  YARN_CACHE_FOLDER: '/home/circleci/.cache/yarn'

.env_test: &env_test
  SIMPLETEST_BASE_URL: 'http://localhost:8888'
  DTT_BASE_URL: 'http://localhost:8888'
  SIMPLETEST_DB: 'sqlite://sites/default/db.default.default.sqlite'
  UNISH_DB_URL: 'sqlite://sites/default/db.default.default.sqlite'
  UNISH_NO_TIMEOUTS: 'y'
  BROWSERTEST_OUTPUT_DIRECTORY: '/home/circleci/repo/tests/fixtures/project_01/docroot/sites/simpletest/browser_output'
  REAL_NVM_DIR: '/home/circleci/.nvm'

executors:
  php_min:
    resource_class: 'small'
    environment:
      <<: *env_app
      <<: *env_xdebug
      <<: *env_composer
      <<: *env_node
      <<: *env_test
    docker:
      -
        name: 'main'
        image: 'cimg/php:8.2'

#  php_plus1:
#    resource_class: 'small'
#    environment:
#      <<: *env_app
#      <<: *env_xdebug
#      <<: *env_composer
#      <<: *env_node
#      <<: *env_test
#    docker:
#      -
#        name: 'main'
#        image: 'cimg/php:8.3'

commands:
  bash_env_init:
    description: 'BASH_ENV - init'
    steps:
      -
        run:
          name: 'BASH_ENV - init'
          command: |
            echo "source '${PWD}/.circleci/app.bash'" >> "${BASH_ENV}"
            echo 'export PATH="/home/circleci/project/circleci/incubator/vendor/bin:${PATH}"' >> "${BASH_ENV}"

  install_php_extension_gd:
    description: 'Install required PHP extensions - GD'
    steps:
      -
        run:
          name: 'Install required PHP extensions - GD'
          command: |
            if php -m | grep gd ; then
                exit 0
            fi

            sudo apt-get update
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
            php -m | grep gd

  install_php_extension_xdebug:
    description: 'Install required PHP extensions - xdebug'
    steps:
      -
        run:
          name: 'Install required PHP extensions - xdebug'
          command: |
            if php -m | grep xdebug ; then
                exit 0
            fi

            sudo apt-get update
            sudo apt-get install -y \
              "php$(php -r 'echo mb_substr(PHP_VERSION, 0, 3);')-xdebug"

  install_php_extension_pcov:
    description: 'Install PCOV PHP extension'
    steps:
      -
        run:
          name: 'Install PCOV PHP extension - pecl install pcov'
          command: |
            if php -m | grep pcov ; then
                exit 0
            fi

            sudo pecl install pcov

            if php -m | grep pcov ; then
                exit 0
            fi

            scanDir="$(php -i | grep --color=never --only-matching --perl-regexp '(?<=^Scan this dir for additional \.ini files => ).+')"
            echo 'extension=pcov' | sudo tee "${scanDir}/pcov.ini"
            php -m | grep pcov

#  nvm_install:
#    description: 'NVM install'
#    steps:
#      -
#        run:
#          name: 'NVM install - self'
#          command: |
#            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
#      -
#        run:
#          name: 'NVM install - node version .nvmrc'
#          command: |
#            nvmRcFileName="$(git ls-files -- './.nvmrc' '**/.nvmrc' | tail -1)"
#            source "${REAL_NVM_DIR}/nvm.sh" --no-use
#            nvm install "$(cat ${nvmRcFileName})"
#      -
#        run:
#          name: 'NVM install - install yarn for node .nvmrc'
#          command: |
#            source "${REAL_NVM_DIR}/nvm.sh"
#            npm --global install --save yarn
#            yarn config set cache-folder "${YARN_CACHE_FOLDER}"

  composer_install:
    description: 'Install Composer dependencies with cache restore and save'
    steps:
      -
        restore_cache:
          name: 'Composer - cache restore'
          keys:
            - 'composer-1001-v1'
      -
        run:
          name: 'Composer - install'
          command: |
            sudo composer self-update
            app-git-config-init
            app-incubator-init '10.1'
      -
        save_cache:
          name: 'Composer - cache save'
          key: 'composer-1001-v1'
          paths:
            - '/home/circleci/.cache/composer/'

  lint:
    description: 'Run linters'
    steps:
      -
        run:
          name: 'Run linters - composer validate'
          command: |
            composer validate
      -
        run:
          name: 'Run linters - phpcs'
          command: |
            phpcs
      -
        run:
          name: 'Run linters - phpstan'
          command: |
            phpstan analyze

  test:
    description: 'Run tests'
    steps:
      -
        run:
          name: 'Run tests - Unit'
          command: |
            cd ../../circleci/incubator
            "$(composer config bin-dir)/phpunit" --testsuite='unit'
      -
        codecov/upload:
          flags: 'unit'
          file: './reports/machine/coverage/phpunit.xml'
#      -
#        run:
#          name: 'Run tests - Integration'
#          command: |
#            source "${REAL_NVM_DIR}/nvm.sh"
#            cd tests/fixtures/project_01/docroot
#            php -S localhost:8888 .ht.router.php 1>/dev/null 2>/dev/null &
#            cd ../../../..
#            "$(composer config bin-dir)/robo" test:phpunit Integration
#      -
#        codecov/upload:
#          flags: 'integration'
#          file: './reports/machine/coverage/coverage.integration.xml'
      -
        store_test_results:
          name: 'Store test results'
          path: './reports/machine/unit'

jobs:
  build:
    executor: 'php_min'
    working_directory: '~/project/drupal/marvin'
    steps:
      - 'checkout'
      - 'bash_env_init'
      - 'install_php_extension_gd'
      - 'composer_install'
  lint:
    executor: 'php_min'
    working_directory: '~/project/drupal/marvin'
    steps:
      - 'checkout'
      - 'bash_env_init'
      - 'install_php_extension_gd'
      - 'composer_install'
      - 'lint'
  test:
    parameters:
      executor:
        type: 'string'
    executor: '<<parameters.executor>>'
    working_directory: '~/project/drupal/marvin'
    steps:
      - 'checkout'
      - 'bash_env_init'
      - 'install_php_extension_gd'
      - 'install_php_extension_pcov'
#      - 'nvm_install'
      - 'composer_install'
      - 'test'

workflows:
  lint_and_test:
    jobs:
      -
        build: {}
      -
        lint:
          requires:
            - 'build'
      -
        test:
          name: 'test_<<matrix.executor>>'
          requires:
            - 'build'
          matrix:
            parameters:
              executor:
                - 'php_min'
#                - 'php_plus1'
